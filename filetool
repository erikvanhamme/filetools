#!/usr/bin/ruby

require 'optparse'

#-------------------------------------------------------------------------------
# Global vars section

$tool_modes = ['file', 'path', 'tape', 'tapeset']
$tool_actions = ['add', 'remove', 'update', 'list', 'info', 'manifest', 'prune', 'check', 'write', 'erase', 'verify']
$tool_modifiers = ['verbose', 'quiet', 'relative', 'duplicates']

$tool_mode_action_matrix = [ \
    [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], \
    [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], \
    [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], \
    [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]]

$tool_action_action_matrix = [ \
    [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], \
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], \
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], \
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], \
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], \
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], \
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]

$tool_actions_items_min = [ 1,  1,  1,  0,  1, 1,  1,  1, 1, 1, 1]
$tool_actions_items_max = [-1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1]

#-------------------------------------------------------------------------------
# File method section

#-------------------------------------------------------------------------------
# Path method section

#-------------------------------------------------------------------------------
# Tape method section

def tape_valid_label?(label)
    if label.length != 8
        return false
    end

    # Taken LTO tape label spec from:
    # https://www.ibm.com/support/knowledgecenter/en/STCMML8/com.ibm.storage.ts3500.doc/ipg_3584_mehlab.html
    # Only supporting LTO1-LTO8 for now.
    return label =~ /[A-Z0-9]{6}[L]{1}[1-8]{1}/
end

#-------------------------------------------------------------------------------
# Tool method section

def tool_check_command_line(command_line)
    # Check if exactly one mode has been set.
    modes_set = 0
    command_line[:modes].each do |m|
        modes_set += 1 if m
    end
    unless (modes_set == 1)
        puts('Error: Exactly 1 operational mode must be specified.')
        return false
    end

    # Check if one or more actions have been set. (get item min and max too)
    actions_set = 0
    command_line[:actions].each do |a|
        actions_set += 1 if a
    end
    unless (actions_set >= 1)
        puts('Error: 1 or more actions must be specified.')
        return false
    end 

    # Check if specified actions are compatible with the mode.
    for i in 0..($tool_modes.length() - 1)
        for j in 0..($tool_actions.length() - 1)
            if (command_line[:modes][i] == true) && (command_line[:actions][j] == true) && ($tool_mode_action_matrix[i][j] == 0)
                puts("Error: Mode #{$tool_modes[i]} cannot be combined with action #{$tool_actions[j]}.");
                return false
            end
        end
    end

    # Check if specified actions are compatible with eachother.
    for i in 0..($tool_actions.length() - 1)
        for j in 0..($tool_actions.length() - 1)
            if (command_line[:actions][i] == true) && (command_line[:actions][j] == true) && ($tool_action_action_matrix[i][j] == 0)
                puts("Error: Action #{$tool_actions[i]} cannot be combined with action #{$tool_actions[j]}.");
                return false
            end
        end
    end

    # Check if correct number of items is specified.
    for i in 0..($tool_actions.length() - 1)
        if (command_line[:actions][i])
            min = $tool_actions_items_min[i]
            max = $tool_actions_items_max[i]
            if (command_line[:items].length() < min)
                puts("Error: Action #{$tool_actions[i]} requires at least #{min} items to operate on.")
                return false
            end
            if (max != -1) && (command_line[:items].length() > max)
                puts("Error: Action #{$tool_actions[i]} requires at most #{max} items to operate on.")
                return false
            end
        end
    end

    # Check if all items are valid files if in file mode.
    if (command_line[:modes][$tool_modes.index('file')])
        command_line[:items].each() do |file|
            unless (File.file?(file))
                puts("Error: Incorrect file name: #{file}")
                return false
            end
        end
    end

    # Check if all items are valid paths if in path mode.
    if (command_line[:modes][$tool_modes.index('path')])
        command_line[:items].each() do |path|
            unless (File.directory?(path))
                puts("Error: Incorrect path name: #{path}")
                return false
            end
        end
    end

    # Check if all items are valid tapes if in tape mode.
    if (command_line[:modes][$tool_modes.index('tape')])
        command_line[:items].each() do |label|
            unless (tape_valid_label?(label))
                puts("Error: Incorrect tape label: #{label}")
                return false
            end
        end
    end

    # All is OK!
    return true
end

def tool_parse_command_line
    modes = []
    actions = []
    modifiers = []
    items = []

    $tool_modes.length().times { modes << false }
    $tool_modifiers.length().times { modifiers << false }
    $tool_actions.length().times { actions << false }

    parser = OptionParser.new() do |options|
        options.on('-h', '--help', 'Displays this help message.') do ||
            puts(options)
        end

        options.on('-m mode', '--mode mode', 'Specifies the operational mode. [file, path, tape, tapeset]') do |mode|
            idx = $tool_modes.index(mode)
            modes[idx] = true if idx
        end

        options.on('-a', '--add item', 'Adds the specified item.') do |item|
            idx = $tool_actions.index('add')
            actions[idx] = true if idx
            items << item
        end

        options.on('-u', '--update item', 'Updates the specified item.') do |item|
            idx = $tool_actions.index('update')
            actions[idx] = true if idx
            items << item
        end

        options.on('-r', '--remove item', 'Removes the specified item.') do |item|
            idx = $tool_actions.index('remove')
            actions[idx] = true if idx
            items << item
        end

        options.on('-l', '--list [item]', 'Lists the specified item.') do |item|
            idx = $tool_actions.index('list')
            actions[idx] = true if idx
            items << item
        end

        options.on('-i', '--info item', 'Displays info about the specified item.') do |item|
            idx = $tool_actions.index('info')
            actions[idx] = true if idx
            items << item
        end

        options.on('-M', '--manifest tape', 'Displays the manifest of the specified tape.') do |tape|
            idx = $tool_actions.index('manifest')
            actions[idx] = true if idx
            items << tape
        end

        options.on('-p', '--prune item', 'Prunes the specified item.') do |item|
            idx = $tool_actions.index('prune')
            actions[idx] = true if idx
            items << item
        end

        options.on('-c', '--check item', 'Checks the specified item.') do |item|
            idx = $tool_actions.index('check')
            actions[idx] = true if idx
            items << item
        end

        options.on('-w', '--write tape', 'Writes the specified tape.') do |tape|
            idx = $tool_actions.index('write')
            actions[idx] = true if idx
            items << tape
        end

        options.on('-e', '--erase tape', 'Erases the specified tape.') do |tape|
            idx = $tool_actions.index('erase')
            actions[idx] = true if idx
            items << tape
        end

        options.on('-V', '--verify tape', 'Verifies the specified tape.') do |tape|
            idx = $tool_actions.index('verify')
            actions[idx] = true if idx
            items << tape
        end

        options.on('-v', '--verbose', 'Enables verbose mode.') do ||
            idx = $tool_modifiers.index('verbose')
            modifiers[idx] = true if idx
        end

        options.on('-q', '--quiet', 'Enables quiet mode. Overrides verbose mode.') do ||
            idx = $tool_modifiers.index('verbose')
            modifiers[idx] = false if idx
            idx = $tool_modifiers.index('quiet')
            modifiers[idx] = true if idx
        end

        options.on('-R', '--relative', 'Display paths as relative.') do ||
            idx = $tool_modifiers.index('relative')
            modifiers[idx] = true if idx
        end

        options.on('-d', '--duplicates', 'Enables duplicates mode.') do ||
            idx = $tool_modifiers.index('duplicates')
            modifiers[idx] = true if idx
        end
    end
    parser.parse!
    
    return {:modes => modes, :actions => actions, :modifiers => modifiers, :items => items}
end

command_line = tool_parse_command_line()

error = !tool_check_command_line(command_line)

puts command_line
puts error

