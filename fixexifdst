#!/usr/bin/ruby

# Copyright 2019 Erik Van Hamme
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'fileutils'
require 'find'

#-----------------------------------------------------------------------------------------------------------------------
# Class definitions

module CC
    BLACK = 30
    RED = 31
    GREEN = 32
    YELLOW = 33
    BLUE = 34
    MAGENTA = 35
    CYAN = 36
    WHITE = 37
    BRIGHT_BLACK = 90
    BRIGHT_RED = 91
    BRIGHT_GREEN = 92
    BRIGHT_YELLOW = 93
    BRIGHT_BLUE = 94
    BRIGHT_MAGENTA = 95
    BRIGHT_CYAN = 96
    BRIGHT_WHITE = 97
end

class String
    def color(fg, bg = nil)
        if (bg.nil?())
            return "\e[#{fg}m#{self}\e[0m"
        else
            return "\e[#{fg};#{bg + 10}m#{self}\e[0m"
        end
    end
end

#-----------------------------------------------------------------------------------------------------------------------
# Helper method section

def find_photos(folder)
    photos = []
    if File.exist?(folder) && File.directory?(folder)
        Find.find(folder) do |path|
            if (path.downcase() =~ /.*\.nef$/)
                photos << path
            end
        end
    end
    return photos
end

#-----------------------------------------------------------------------------------------------------------------------
# Operations

def usage()
    puts("Usage: ./fixexifdst --check folder timezone")
    puts("Usage: ./fixexifdst --fix folder timezone")
end

def check(args)
    if (args.length != 2) || !(File.exist?(args[0]) && File.directory?(args[0])) # TODO: validate timezone argument.
        puts("Usage: ./fixexifdst --check folder timezone")
        return
    end

    output = []

    photos = find_photos(args[0])

    ENV['TZ'] = args[1]

    photos.each do |photo|
        data = `exiv2 -pt -K Exif.NikonWt.DaylightSavings -K Exif.Image.DateTime -K Exif.Photo.DateTimeOriginal -K Exif.Photo.DateTimeDigitized "#{photo}"`

        time_text = data.match(/Exif.Image.DateTime.*$/).to_s()
        time_text = time_text.match(/[0-9]{4}\:[0-9]{2}\:[0-9]{2} [0-9]{2}\:[0-9]{2}\:[0-9]{2}/).to_s()

        matches = time_text.scan(/[0-9]{2}/)

        year = Integer(time_text.match(/[0-9]{4}/).to_s(), 10)
        month = Integer(matches[2], 10)
        day = Integer(matches[3], 10)
        hours = Integer(matches[4], 10)
        minutes = Integer(matches[5], 10)
        seconds = Integer(matches[6], 10)

        time = Time.new(year, month, day, hours, minutes, seconds)

        dst_text = data.match(/Exif.NikonWt.DaylightSavings.*$/).to_s() 
        if (dst_text =~ /No/)
            dst = false
        elsif (dst_text =~ /Yes/)
            dst = true
        else
            puts("Unexpected error when parsing #{photo}.".color(CC::RED))
        end
        
        if (dst != time.dst?())
            if (time.dst?())
                puts("File #{photo} is taken in DST and is not set to DST. Should add 1 hour to timestamp.".color(CC::YELLOW))
                time += 3600
            else
                puts("File #{photo} is not taken in DST and is set to DST. Should subtract 1 hour from timestamp.".color(CC::YELLOW))
                time -= 3600
            end
            output << {:photo => photo, :time => time}
        end
    end

    ENV['TZ'] = nil

    return output
end

def fix(args)
    if (args.length != 2) || !(File.exist?(args[0]) && File.directory?(args[0])) # TODO: validate timezone argument.
        puts("Usage: ./fixexifdst --fix folder timezone")
        return
    end

    fixes = check(args)

    fixes.each do |fix|
        photo = fix[:photo]
        time = fix[:time]

        if (time.dst?())
            dst_val = 1
        else
            dst_val = 0
        end

        time_val = time.strftime("%Y:%m:%d %H:%M:%S")
        puts time_val

        cmd = "exiv2 -M\"set Exif.NikonWt.DaylightSavings #{dst_val}\" -M\"set Exif.Image.DateTime #{time_val}\" "
        cmd += "-M\"set Exif.Photo.DateTimeOriginal #{time_val}\" -M\"set Exif.Photo.DateTimeDigitized #{time_val}\" #{photo}"
        puts cmd

        result = `#{cmd}`
        puts result
    end
    # TODO: Implement me.
end

#-----------------------------------------------------------------------------------------------------------------------
# Main

puts("Fix EXIF data DST [tool V1]".color(CC::CYAN))
puts("  Copyright 2020 Erik Van Hamme (erik.vanhamme@gmail.com)".color(CC::CYAN))

args = ARGV

if (args.length() == 0)
    usage()
    exit(0)
end

action = args[0]
args = args[1..(args.length() - 1)]

case action
when '--check'
    check(args)
when '--fix'
    fix(args)
else
    usage()
    exit(0)
end
